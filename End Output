import os
import rasterio
from rasterio.mask import mask
from shapely.geometry import box, mapping
import numpy as np
import matplotlib.pyplot as plt

# Paths
input_tif = r"LandsatDownloader/LST.tif"  # Use the output from the previous script
output_dir = r"LandsatDownloader"
output_clipped_tif = os.path.join(output_dir, "LST_Clipped.tif")

# Ensure the output directory exists
os.makedirs(output_dir, exist_ok=True)

# Step 1: Define the bounding box using lat-long coordinates
# Replace these coordinates with your area of interest (AOI)
max_lat = MAX LATITUDE
max_lon = MAX LONGITUDE
min_lat = MIN LATITUDE
min_lon = MIN LONGITUDE

# Open the raster file
with rasterio.open(input_tif) as src:
    # Ensure the bounding box is transformed to the raster's CRS
    bbox = box(min_lon, min_lat, max_lon, max_lat)  # Shapely box using lon/lat
    bbox = rasterio.warp.transform_geom(
        "EPSG:4326", src.crs, mapping(bbox)  # Transform bbox from WGS84 to raster CRS
    )

    # Step 2: Mask (clip) the raster using the bounding box
    out_image, out_transform = mask(src, [bbox], crop=True)

    # Update the metadata for the output file
    out_meta = src.meta.copy()
    out_meta.update({
        "driver": "GTiff",
        "height": out_image.shape[1],
        "width": out_image.shape[2],
        "transform": out_transform,
        "compress": "lzw"
    })

# Step 3: Save the clipped raster
with rasterio.open(output_clipped_tif, "w", **out_meta) as dest:
    dest.write(out_image)

print(f"Clipped raster saved at: {output_clipped_tif}")


# Step 4: Display the clipped raster with a specified color palette
def display_raster(raster_array, color_palette="viridis"):
    """
    Displays a raster array with a specified color palette.

    Parameters:
        raster_array (numpy.ndarray): The raster data to display.
        color_palette (str): The color palette to use (any valid matplotlib colormap).
    """
    plt.figure(figsize=(10, 8))
    plt.imshow(raster_array, cmap=color_palette, interpolation="none")
    plt.colorbar(label="Land Surface Temperature (Â°C)")
    plt.title("Clipped Land Surface Temperature")
    plt.axis("off")
    plt.show()


# Load and display the clipped raster
with rasterio.open(output_clipped_tif) as clipped_src:
    clipped_array = clipped_src.read(1)

# Specify your color palette here (e.g., 'viridis', 'plasma', 'cividis', etc.)
chosen_palette = "plasma"  # Replace with your desired colormap
display_raster(clipped_array, color_palette=chosen_palette)
